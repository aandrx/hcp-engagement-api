name: API Health Check

on:
  schedule:
    # Run every 30 minutes
    - cron: '*/30 * * * *'
  workflow_dispatch:
  push:
    branches: [main]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  health-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check Documentation Health
        id: docs
        run: |
          echo "📄 Checking GitHub Pages documentation..."
          if curl -s -f -I "https://aandrx.github.io/hcp-engagement-api/openapi.yaml" > /dev/null 2>&1; then
            echo "✅ Documentation is accessible"
            echo "status=healthy" >> $GITHUB_OUTPUT
            echo "message=Available" >> $GITHUB_OUTPUT
            echo "color=brightgreen" >> $GITHUB_OUTPUT
          else
            echo "❌ Documentation is not accessible"
            echo "status=unhealthy" >> $GITHUB_OUTPUT
            echo "message=Unavailable" >> $GITHUB_OUTPUT
            echo "color=red" >> $GITHUB_OUTPUT
          fi

      - name: Check Health Page
        id: health_page
        run: |
          echo "🏥 Checking health page..."
          if curl -s -f -I "https://aandrx.github.io/hcp-engagement-api/health.html" > /dev/null 2>&1; then
            echo "✅ Health page is accessible"
            echo "status=healthy" >> $GITHUB_OUTPUT
          else
            echo "❌ Health page is not accessible"
            echo "status=unhealthy" >> $GITHUB_OUTPUT
          fi

      - name: Check Render Deployment
        id: render_api
        run: |
          echo "🚀 Checking Render deployment..."
          # Replace 'your-app-name' with your actual Render service name
          RENDER_URL="https://hcp-engagement-api.onrender.com"
          
          if curl -s -f "${RENDER_URL}/health" --max-time 30 > /dev/null 2>&1; then
            echo "✅ Render API is live and healthy"
            echo "status=healthy" >> $GITHUB_OUTPUT
            echo "url=${RENDER_URL}" >> $GITHUB_OUTPUT
            
            # Test if Groq integration is working
            if curl -s "${RENDER_URL}/health" --max-time 30 | grep -q '"groq_integration"' 2>/dev/null; then
              echo "✅ Groq AI integration detected"
              echo "groq_status=active" >> $GITHUB_OUTPUT
            else
              echo "⚠️ Groq AI integration status unknown"
              echo "groq_status=unknown" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ Render API is not accessible or unhealthy"
            echo "status=unhealthy" >> $GITHUB_OUTPUT
            echo "url=${RENDER_URL}" >> $GITHUB_OUTPUT
            echo "groq_status=unknown" >> $GITHUB_OUTPUT
          fi

      - name: Create Status Report
        run: |
          echo "📊 Creating status report..."
          mkdir -p ./status
          
          # Create health status JSON
          cat > ./status/health.json << EOF
          {
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "overall_status": "${{ steps.docs.outputs.status }}",
            "documentation": {
              "status": "${{ steps.docs.outputs.status }}",
              "url": "https://aandrx.github.io/hcp-engagement-api/",
              "openapi_url": "https://aandrx.github.io/hcp-engagement-api/openapi.yaml"
            },
            "health_page": {
              "status": "${{ steps.health_page.outputs.status }}",
              "url": "https://aandrx.github.io/hcp-engagement-api/health.html"
            },
            "render_deployment": {
              "status": "${{ steps.render_api.outputs.status }}",
              "url": "${{ steps.render_api.outputs.url }}",
              "groq_integration": "${{ steps.render_api.outputs.groq_status }}",
              "last_checked": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
            },
            "production": {
              "status": "deployed",
              "message": "API deployed and monitored on Render"
            },
            "services": {
              "authentication": "ready",
              "literature_search": "ready", 
              "ai_analysis": "ready",
              "analytics": "ready"
            },
            "deployment_options": [
              "Heroku",
              "Render", 
              "Railway",
              "Azure Container Apps",
              "AWS App Runner"
            ]
          }
          EOF
          
          echo "Status: ${{ steps.docs.outputs.status }}"
          echo "Message: ${{ steps.docs.outputs.message }}"

      - name: Deploy Status to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./status
          destination_dir: status
          keep_files: true
          
      - name: Summary
        run: |
          echo "## Health Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Documentation: ${{ steps.docs.outputs.status }} ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Health Page: ${{ steps.health_page.outputs.status }} ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Render API: ${{ steps.render_api.outputs.status }} 🚀" >> $GITHUB_STEP_SUMMARY
          echo "- Groq AI: ${{ steps.render_api.outputs.groq_status }} 🤖" >> $GITHUB_STEP_SUMMARY
          echo "- Status Report: Generated and deployed ✅" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Links:**" >> $GITHUB_STEP_SUMMARY
          echo "- [API Documentation](https://aandrx.github.io/hcp-engagement-api/)" >> $GITHUB_STEP_SUMMARY
          echo "- [Health Status](https://aandrx.github.io/hcp-engagement-api/health.html)" >> $GITHUB_STEP_SUMMARY
          echo "- [Live API](${{ steps.render_api.outputs.url }})" >> $GITHUB_STEP_SUMMARY
          echo "- [API Health Check](${{ steps.render_api.outputs.url }}/health)" >> $GITHUB_STEP_SUMMARY
          echo "- [Status JSON](https://aandrx.github.io/hcp-engagement-api/status/health.json)" >> $GITHUB_STEP_SUMMARY
